0	CCSPlayer::~CCSPlayer()
1	CBaseEntity::SetRefEHandle(CBaseHandle  const&)
2	CBaseEntity::GetRefEHandle(void)const
3	CBaseEntity::GetCollideable(void)
4	CBaseEntity::GetNetworkable(void)
5	CBaseEntity::GetBaseEntity(void)
6	CBaseEntity::GetModelIndex(void)const
7	CBaseEntity::GetModelName(void)const
8	CBaseEntity::SetModelIndex(int)
9	CCSPlayer::GetServerClass(void)
10	CCSPlayer::YouForgotToImplementOrDeclareServerClass(void)
11	CCSPlayer::GetDataDescMap(void)
12	CBaseAnimating::TestCollision(Ray_t  const&,unsigned int,CGameTrace &)
13	CBaseAnimating::TestHitboxes(Ray_t  const&,unsigned int,CGameTrace &)
14	CBaseEntity::ComputeWorldSpaceSurroundingBox(Vector *,Vector *)
15	CBaseEntity::ShouldCollide(int,int)const
16	CBaseEntity::SetOwnerEntity(CBaseEntity*)
17	CBasePlayer::ShouldTransmit(CCheckTransmitInfo  const*)
18	CBasePlayer::UpdateTransmitState(void)
19	CBaseCombatCharacter::SetTransmit(CCheckTransmitInfo *,bool)
20	CBasePlayer::GetTracerType(void)
21	CCSPlayer::Spawn(void)
22	CCSPlayer::Precache(void)
23	CBasePlayer::SetModel(char  const*)
24	CBaseMultiplayerPlayer::PostConstructor(char  const*)
25	CBaseEntity::PostClientActive(void)
26	CBaseEntity::ParseMapData(CEntityMapData *)
27	CBaseEntity::KeyValue(char  const*,char  const*)
28	CBaseEntity::KeyValue(char  const*,float)
29	CBaseEntity::KeyValue(char  const*,Vector  const&)
30	CBaseEntity::GetKeyValue(char  const*,char *,int)
31	CBasePlayer::Activate(void)
32	CBaseEntity::SetParent(CBaseEntity*,int)
33	CBasePlayer::ObjectCaps(void)
34	CBaseEntity::AcceptInput(char  const*,CBaseEntity*,CBaseEntity*,variant_t,int)
35	CBaseAnimating::GetInputDispatchEffectPosition(char  const*,Vector &,QAngle &)
36	CBasePlayer::DrawDebugGeometryOverlays(void)
37	CBaseAnimating::DrawDebugTextOverlays(void)
38	CBasePlayer::Save(ISave &)
39	CBasePlayer::Restore(IRestore &)
40	CBasePlayer::ShouldSavePhysics(void)
41	CBaseEntity::OnSave(IEntitySaveUtils *)
42	CBasePlayer::OnRestore(void)
43	CBasePlayer::RequiredEdictIndex(void)
44	CBaseEntity::MoveDone(void)
45	CBaseEntity::Think(void)
46	CBasePlayer::NetworkStateChanged_m_nNextThinkTick(void)
47	CBasePlayer::NetworkStateChanged_m_nNextThinkTick(void *)
48	CBaseAnimating::GetBaseAnimating(void)
49	CBaseMultiplayerPlayer::GetResponseSystem(void)
50	CAI_ExpresserHost<CBasePlayer>::DispatchResponse(char  const*)
51	CBasePlayer::Classify(void)
52	CBaseEntity::DeathNotice(CBaseEntity*)
53	CBaseEntity::ShouldAttractAutoAim(CBaseEntity*)
54	CBaseEntity::GetAutoAimRadius(void)
55	CBaseEntity::GetAutoAimCenter(void)
56	CBaseEntity::GetBeamTraceFilter(void)
57	CBaseEntity::PassesDamageFilter(CTakeDamageInfo  const&)
58	CCSPlayer::TraceAttack(CTakeDamageInfo  const&,Vector  const&,CGameTrace *)
59	CBaseEntity::CanBeHitByMeleeAttack(CBaseEntity*)
60	CCSPlayer::OnTakeDamage(CTakeDamageInfo  const&)
61	CBaseEntity::AdjustDamageDirection(CTakeDamageInfo  const&,Vector &,CBaseEntity*)
62	CBasePlayer::TakeHealth(float,int)
63	CBaseEntity::IsAlive(void)
64	CCSPlayer::Event_Killed(CTakeDamageInfo  const&)
65	CCSPlayer::Event_KilledOther(CBaseEntity *,CTakeDamageInfo  const&)
66	CBaseCombatCharacter::BloodColor(void)
67	CBaseEntity::IsTriggered(CBaseEntity*)
68	CBaseEntity::IsNPC(void)const
69	CBaseCombatCharacter::MyCombatCharacterPointer(void)
70	CBaseEntity::MyNextBotPointer(void)
71	CBaseEntity::GetDelay(void)
72	CBaseEntity::IsMoving(void)
73	CBaseEntity::DamageDecal(int,int)
74	CBaseEntity::DecalTrace(CGameTrace *,char  const*)
75	CBaseEntity::ImpactTrace(CGameTrace *,int,char *)
76	CBaseEntity::OnControls(CBaseEntity*)
77	CBaseEntity::HasTarget(string_t)
78	CBasePlayer::IsPlayer(void)const
79	CBasePlayer::IsNetClient(void)const
80	CBaseEntity::IsTemplate(void)
81	CBaseEntity::IsBaseObject(void)const
82	CBaseEntity::IsBaseTrain(void)const
83	CBaseEntity::IsBaseCombatWeapon(void)const
84	CBaseEntity::IsWearable(void)const
85	CBaseEntity::MyCombatWeaponPointer(void)
86	CBaseEntity::GetServerVehicle(void)
87	CBaseEntity::IsViewable(void)
88	CCSPlayer::ChangeTeam(int)
89	CBaseEntity::OnEntityEvent(EntityEvent_t,void *)
90	CBaseEntity::CanStandOn(CBaseEntity*)const
91	CBaseEntity::CanStandOn(edict_t *)const
92	CBaseEntity::GetEnemy(void)
93	CBaseEntity::GetEnemy(void)const
94	CBaseEntity::Use(CBaseEntity*,CBaseEntity*,USE_TYPE,float)
95	CBaseEntity::StartTouch(CBaseEntity*)
96	CBasePlayer::Touch(CBaseEntity *)
97	CBaseEntity::EndTouch(CBaseEntity*)
98	CBaseEntity::StartBlocked(CBaseEntity*)
99	CBaseEntity::Blocked(CBaseEntity*)
100	CBaseEntity::EndBlocked(void)
101	CBasePlayer::PhysicsSimulate(void)
102	CBasePlayer::UpdateOnRemove(void)
103	CBaseEntity::StopLoopingSounds(void)
104	CBaseEntity::SUB_AllowedToFade(void)
105	CBaseFlex::Teleport(Vector  const*,QAngle  const*,Vector  const*)
106	CBaseEntity::NotifySystemEvent(CBaseEntity*,notify_system_event_t,notify_system_event_params_t  const&)
107	CBasePlayer::MakeTracer(Vector  const&,CGameTrace  const&,int)
108	CBaseEntity::GetTracerAttachment(void)
109	CBaseEntity::FireBullets(FireBulletsInfo_t  const&)
110	CBasePlayer::DoImpactEffect(CGameTrace &,int)
111	CBaseEntity::ModifyFireBulletsDamage(CTakeDamageInfo *)
112	CBaseEntity::Respawn(void)
113	CBaseEntity::IsLockedByMaster(void)
114	CBaseEntity::GetMaxHealth(void)const
115	CBaseMultiplayerPlayer::ModifyOrAppendCriteria(AI_CriteriaSet &)
116	CBaseEntity::NetworkStateChanged_m_iMaxHealth(void)
117	CBaseEntity::NetworkStateChanged_m_iMaxHealth(void *)
118	CBasePlayer::NetworkStateChanged_m_iHealth(void)
119	CBasePlayer::NetworkStateChanged_m_iHealth(void *)
120	CBasePlayer::NetworkStateChanged_m_lifeState(void)
121	CBasePlayer::NetworkStateChanged_m_lifeState(void *)
122	CBaseEntity::NetworkStateChanged_m_takedamage(void)
123	CBaseEntity::NetworkStateChanged_m_takedamage(void *)
124	CBaseEntity::GetDamageType(void)const
125	CBaseEntity::GetDamage(void)
126	CBaseEntity::SetDamage(float)
127	CBasePlayer::EyePosition(void)
128	CBasePlayer::EyeAngles(void)
129	CBasePlayer::LocalEyeAngles(void)
130	CBaseEntity::EarPosition(void)
131	CBasePlayer::BodyTarget(Vector  const&,bool)
132	CBaseEntity::HeadTarget(Vector  const&)
133	CBaseEntity::GetVectors(Vector *,Vector *,Vector *)const
134	CBaseEntity::GetViewOffset(void)const
135	CBaseEntity::SetViewOffset(Vector  const&)
136	CBasePlayer::GetSmoothedVelocity(void)
137	CBaseAnimating::GetVelocity(Vector *,Vector *)
138	CBaseCombatCharacter::FVisible(CBaseEntity *,int,CBaseEntity **)
139	CBaseCombatCharacter::FVisible(Vector  const&,int,CBaseEntity **)
140	CBaseEntity::CanBeSeenBy(CAI_BaseNPC *)
141	CBaseEntity::GetAttackDamageScale(CBaseEntity*)
142	CBaseEntity::GetReceivedDamageScale(CBaseEntity*)
143	CBaseEntity::GetGroundVelocityToApply(Vector &)
144	CBaseEntity::PhysicsSplash(Vector  const&,Vector  const&,float,float)
145	CBaseEntity::Splash(void)
146	CBaseEntity::WorldSpaceCenter(void)const
147	CBaseEntity::GetSoundEmissionOrigin(void)const
148	CBaseEntity::IsDeflectable(void)
149	CBaseEntity::Deflected(CBaseEntity*,Vector &)
150	CBaseEntity::CreateVPhysics(void)
151	CBaseEntity::ForceVPhysicsCollide(CBaseEntity*)
152	CBasePlayer::VPhysicsDestroyObject(void)
153	CBasePlayer::VPhysicsUpdate(IPhysicsObject *)
154	CBaseEntity::VPhysicsTakeDamage(CTakeDamageInfo  const&)
155	CBaseCombatCharacter::VPhysicsShadowCollision(int,gamevcollisionevent_t *)
156	CCSPlayer::VPhysicsShadowUpdate(IPhysicsObject *)
157	CBasePlayer::VPhysicsCollision(int,gamevcollisionevent_t *)
158	CBaseEntity::VPhysicsFriction(IPhysicsObject *,float,int,int)
159	CBaseEntity::UpdatePhysicsShadowToCurrentPosition(float)
160	CBaseEntity::VPhysicsGetObjectList(IPhysicsObject **,int)
161	CBaseEntity::VPhysicsIsFlesh(void)
162	CBaseEntity::HasPhysicsAttacker(float)
163	CBasePlayer::PhysicsSolidMaskForEntity(void)const
164	CBaseEntity::ResolveFlyCollisionCustom(CGameTrace &,Vector &)
165	CBaseEntity::PerformCustomPhysics(Vector *,Vector *,QAngle *,QAngle *)
166	CBaseAnimating::GetStepOrigin(void)const
167	CBaseAnimating::GetStepAngles(void)const
168	CBaseEntity::ShouldDrawWaterImpacts(void)
169	CBasePlayer::NetworkStateChanged_m_fFlags(void)
170	CBasePlayer::NetworkStateChanged_m_fFlags(void *)
171	CBasePlayer::NetworkStateChanged_m_nWaterLevel(void)
172	CBasePlayer::NetworkStateChanged_m_nWaterLevel(void *)
173	CBasePlayer::NetworkStateChanged_m_hGroundEntity(void)
174	CBasePlayer::NetworkStateChanged_m_hGroundEntity(void *)
175	CBasePlayer::NetworkStateChanged_m_vecBaseVelocity(void)
176	CBasePlayer::NetworkStateChanged_m_vecBaseVelocity(void *)
177	CBasePlayer::NetworkStateChanged_m_flFriction(void)
178	CBasePlayer::NetworkStateChanged_m_flFriction(void *)
179	CBasePlayer::NetworkStateChanged_m_vecVelocity(void)
180	CBasePlayer::NetworkStateChanged_m_vecVelocity(void *)
181	CBasePlayer::NetworkStateChanged_m_vecViewOffset(void)
182	CBasePlayer::NetworkStateChanged_m_vecViewOffset(void *)
183	CBaseAnimating::GetIdealSpeed(void)const
184	CBaseAnimating::GetIdealAccel(void)const
185	CBaseAnimatingOverlay::StudioFrameAdvance(void)
186	CBaseAnimating::IsActivityFinished(void)
187	CBaseAnimating::GetSequenceGroundSpeed(CStudioHdr *,int)
188	CBaseAnimating::ClampRagdollForce(Vector  const&,Vector*)
189	CBaseAnimating::BecomeRagdollOnClient(Vector  const&)
190	CBaseAnimating::IsRagdoll(void)
191	CBaseAnimating::CanBecomeRagdoll(void)
192	CBaseAnimatingOverlay::GetSkeleton(CStudioHdr *,Vector *,Quaternion *,int)
193	CBaseAnimating::GetBoneTransform(int,matrix3x4_t &)
194	CBaseAnimating::SetupBones(matrix3x4_t *,int)
195	CBaseAnimating::CalculateIKLocks(float)
196	CBaseAnimatingOverlay::DispatchAnimEvents(CBaseAnimating *)
197	CCSPlayer::HandleAnimEvent(animevent_t *)
198	CBaseAnimating::PopulatePoseParameters(void)
199	CBaseAnimating::GetAttachment(int,matrix3x4_t &)
200	CBaseAnimating::InitBoneControllers(void)
201	CBaseAnimating::GetGroundSpeedVelocity(void)
202	CBaseAnimating::Ignite(float,bool,float,bool)
203	CBaseAnimating::IgniteLifetime(float)
204	CBaseAnimating::IgniteNumHitboxFires(int)
205	CBaseAnimating::IgniteHitboxFireScale(float)
206	CBaseAnimating::Extinguish(void)
207	CBaseCombatCharacter::SetLightingOriginRelative(CBaseEntity *)
208	CBaseAnimating::SetLightingOrigin(CBaseEntity *)
209	CBaseFlex::SetViewtarget(Vector  const&)
210	CBaseFlex::StartSceneEvent(CSceneEventInfo *,CChoreoScene *,CChoreoEvent *,CChoreoActor *,CBaseEntity *)
211	CBaseFlex::ProcessSceneEvents(void)
212	CBaseFlex::ProcessSceneEvent(CSceneEventInfo *,CChoreoScene *,CChoreoEvent *)
213	CBaseFlex::ClearSceneEvent(CSceneEventInfo *,bool,bool)
214	CBaseFlex::CheckSceneEventCompletion(CSceneEventInfo *,float,CChoreoScene *,CChoreoEvent *)
215	CBaseFlex::PlayScene(char  const*,float,AI_Response *,IRecipientFilter *)
216	CBaseFlex::PlayAutoGeneratedSoundScene(char  const*)
217	CBasePlayer::GetPhysicsImpactDamageTable(void)
218	CBaseCombatCharacter::FInViewCone(CBaseEntity *)
219	CBaseCombatCharacter::FInViewCone(Vector  const&)
220	CBaseCombatCharacter::FInAimCone(CBaseEntity *)
221	CBaseCombatCharacter::FInAimCone(Vector  const&)
222	CBaseCombatCharacter::ShouldShootMissTarget(CBaseCombatCharacter*)
223	CBaseCombatCharacter::FindMissTarget(void)
224	CBaseCombatCharacter::HandleInteraction(int,void *,CBaseCombatCharacter*)
225	CBasePlayer::BodyAngles(void)
226	CBaseCombatCharacter::BodyDirection2D(void)
227	CBaseCombatCharacter::BodyDirection3D(void)
228	CBaseCombatCharacter::HeadDirection2D(void)
229	CBaseCombatCharacter::HeadDirection3D(void)
230	CBaseCombatCharacter::EyeDirection2D(void)
231	CBaseCombatCharacter::EyeDirection3D(void)
232	CBaseCombatCharacter::IsHiddenByFog(Vector  const&)const
233	CBaseCombatCharacter::IsHiddenByFog(CBaseEntity *)const
234	CBaseCombatCharacter::IsHiddenByFog(float)const
235	CBaseCombatCharacter::GetFogObscuredRatio(Vector  const&)const
236	CBaseCombatCharacter::GetFogObscuredRatio(CBaseEntity *)const
237	CBaseCombatCharacter::GetFogObscuredRatio(float)const
238	CBaseCombatCharacter::IsLookingTowards(CBaseEntity  const*,float)const
239	CBaseCombatCharacter::IsLookingTowards(Vector  const&,float)const
240	CBaseCombatCharacter::IsInFieldOfView(CBaseEntity *)const
241	CBaseCombatCharacter::IsInFieldOfView(Vector  const&)const
242	CBaseCombatCharacter::IsLineOfSightClear(CBaseEntity *,CBaseCombatCharacter::LineOfSightCheckType)const
243	CBaseCombatCharacter::IsLineOfSightClear(Vector  const&,CBaseCombatCharacter::LineOfSightCheckType,CBaseEntity *)const
244	CBaseCombatCharacter::GiveAmmo(int,int,bool)
245	CBaseCombatCharacter::NPC_TranslateActivity(Activity)
246	CBaseCombatCharacter::Weapon_TranslateActivity(Activity,bool *)
247	CBaseCombatCharacter::Weapon_FrameUpdate(void)
248	CBaseCombatCharacter::Weapon_HandleAnimEvent(animevent_t *)
249	CCSPlayer::Weapon_CanUse(CBaseCombatWeapon *)
250	CCSPlayer::Weapon_Equip(CBaseCombatWeapon *)
251	CBaseCombatCharacter::Weapon_EquipAmmoOnly(CBaseCombatWeapon *)
252	CBasePlayer::Weapon_Drop(CBaseCombatWeapon *,Vector  const*,Vector  const*)
253	CCSPlayer::Weapon_Switch(CBaseCombatWeapon *,int)
254	CBasePlayer::Weapon_ShootPosition(void)
255	CCSPlayer::Weapon_CanSwitchTo(CBaseCombatWeapon *)
256	CBaseCombatCharacter::Weapon_SlotOccupied(CBaseCombatWeapon *)
257	CBaseCombatCharacter::Weapon_GetSlot(int)const
258	CBaseCombatCharacter::AddPlayerItem(CBaseCombatWeapon *)
259	CBasePlayer::RemovePlayerItem(CBaseCombatWeapon *)
260	CBaseCombatCharacter::CanBecomeServerRagdoll(void)
261	CCSPlayer::OnTakeDamage_Alive(CTakeDamageInfo  const&)
262	CBaseCombatCharacter::OnTakeDamage_Dying(CTakeDamageInfo  const&)
263	CBaseCombatCharacter::OnTakeDamage_Dead(CTakeDamageInfo  const&)
264	CBaseCombatCharacter::GetAliveDuration(void)const
265	CBaseCombatCharacter::OnFriendDamaged(CBaseCombatCharacter*,CBaseEntity *)
266	CBaseCombatCharacter::NotifyFriendsOfDamage(CBaseEntity *)
267	CBaseCombatCharacter::HasEverBeenInjured(int)const
268	CBaseCombatCharacter::GetTimeSinceLastInjury(int)const
269	CBaseCombatCharacter::OnPlayerKilledOther(CBaseEntity *,CTakeDamageInfo  const&)
270	CBaseCombatCharacter::GetDeathActivity(void)
271	CBaseCombatCharacter::CorpseGib(CTakeDamageInfo  const&)
272	CBaseCombatCharacter::CorpseFade(void)
273	CBaseCombatCharacter::HasHumanGibs(void)
274	CBaseCombatCharacter::HasAlienGibs(void)
275	CBaseCombatCharacter::ShouldGib(CTakeDamageInfo  const&)
276	CBaseCombatCharacter::OnKilledNPC(CBaseCombatCharacter*)
277	CBaseCombatCharacter::Event_Gibbed(CTakeDamageInfo  const&)
278	CBasePlayer::Event_Dying(void)
279	CBaseCombatCharacter::BecomeRagdoll(CTakeDamageInfo  const&,Vector  const&)
280	CBaseCombatCharacter::FixupBurningServerRagdoll(CBaseEntity *)
281	CBaseCombatCharacter::BecomeRagdollBoogie(CBaseEntity *,Vector  const&,float,int)
282	CBaseCombatCharacter::CheckTraceHullAttack(float,Vector  const&,Vector  const&,int,int,float,bool)
283	CBaseCombatCharacter::CheckTraceHullAttack(Vector  const&,Vector  const&,Vector  const&,Vector  const&,int,int,float,bool)
284	CBaseCombatCharacter::PushawayTouch(CBaseEntity *)
285	CBaseCombatCharacter::IRelationType(CBaseEntity *)
286	CBaseCombatCharacter::IRelationPriority(CBaseEntity *)
287	CBasePlayer::IsInAVehicle(void)const
288	CBasePlayer::GetVehicle(void)
289	CBasePlayer::GetVehicleEntity(void)
290	CBaseCombatCharacter::ExitVehicle(void)
291	CBaseCombatCharacter::RemoveAllWeapons(void)
292	CBaseCombatCharacter::CalcWeaponProficiency(CBaseCombatWeapon *)
293	CBaseCombatCharacter::GetAttackSpread(CBaseCombatWeapon *,CBaseEntity *)
294	CBaseCombatCharacter::GetSpreadBias(CBaseCombatWeapon *,CBaseEntity *)
295	CBasePlayer::DoMuzzleFlash(void)
296	CBaseCombatCharacter::AddEntityRelationship(CBaseEntity *,Disposition_t,int)
297	CBaseCombatCharacter::RemoveEntityRelationship(CBaseEntity *)
298	CBaseCombatCharacter::AddClassRelationship(Class_T,Disposition_t,int)
299	CBaseCombatCharacter::OnChangeActiveWeapon(CBaseCombatWeapon *,CBaseCombatWeapon *)
300	CBaseCombatCharacter::GetLastKnownArea(void)const
301	CBaseCombatCharacter::IsAreaTraversable(CNavArea  const*)const
302	CBaseCombatCharacter::ClearLastKnownArea(void)
303	CBaseCombatCharacter::UpdateLastKnownArea(void)
304	CBaseCombatCharacter::OnNavAreaChanged(CNavArea *,CNavArea *)
305	CBaseCombatCharacter::OnNavAreaRemoved(CNavArea *)
306	CBaseCombatCharacter::OnPursuedBy(INextBot *)
307	CBasePlayer::NetworkStateChanged_m_iAmmo(void)
308	CBasePlayer::NetworkStateChanged_m_iAmmo(void *)
309	CCSPlayer::CreateViewModel(int)
310	CCSPlayer::SetupVisibility(CBaseEntity *,unsigned char *,int)
311	CCSPlayer::WantsLagCompensationOnEntity(CBasePlayer  const*,CUserCmd  const*,CBitVec<2048>  const*)const
312	CBasePlayer::SharedSpawn(void)
313	CBasePlayer::ForceRespawn(void)
314	CCSPlayer::InitialSpawn(void)
315	CBasePlayer::InitHUD(void)
316	CCSPlayer::ShowViewPortPanel(char  const*,bool,KeyValues *)
317	CCSPlayer::PlayerDeathThink(void)
318	CBasePlayer::Jump(void)
319	CBasePlayer::Duck(void)
320	CCSPlayer::PreThink(void)
321	CCSPlayer::PostThink(void)
322	CBasePlayer::DamageEffect(float,int)
323	CCSPlayer::OnDamagedByExplosion(CTakeDamageInfo  const&)
324	CBasePlayer::ShouldFadeOnDeath(void)
325	CBasePlayer::IsFakeClient(void)const
326	CBasePlayer::GetPlayerMins(void)const
327	CBasePlayer::GetPlayerMaxs(void)const
328	CBasePlayer::CalcRoll(QAngle  const&,Vector  const&,float,float)
329	CBasePlayer::PackDeadPlayerItems(void)
330	CCSPlayer::RemoveAllItems(bool)
331	CBasePlayer::IsRunning(void)const
332	CBasePlayer::Weapon_SetLast(CBaseCombatWeapon *)
333	CBasePlayer::Weapon_ShouldSetLast(CBaseCombatWeapon *,CBaseCombatWeapon *)
334	CBasePlayer::Weapon_ShouldSelectItem(CBaseCombatWeapon *)
335	CBasePlayer::OnMyWeaponFired(CBaseCombatWeapon *)
336	CBasePlayer::GetTimeSinceWeaponFired(void)const
337	CBasePlayer::IsFiringWeapon(void)const
338	CBasePlayer::UpdateClientData(void)
339	CBasePlayer::ExitLadder(void)
340	CBasePlayer::GetLadderSurface(Vector  const&)
341	CBasePlayer::SetFlashlightEnabled(bool)
342	CCSPlayer::FlashlightIsOn(void)
343	CCSPlayer::FlashlightTurnOn(void)
344	CCSPlayer::FlashlightTurnOff(void)
345	CBasePlayer::IsIlluminatedByFlashlight(CBaseEntity *,float *)
346	CCSPlayer::UpdateStepSound(surfacedata_t *,Vector  const&,Vector  const&)
347	CCSPlayer::PlayStepSound(Vector &,surfacedata_t *,float,bool)
348	CBasePlayer::GetStepSoundVelocities(float *,float *)
349	CBasePlayer::SetStepSoundTime(stepsoundtimes_t,bool)
350	CCSPlayer::DeathSound(CTakeDamageInfo  const&)
351	CCSPlayer::SetAnimation(PLAYER_ANIM)
352	CBasePlayer::ImpulseCommands(void)
353	CCSPlayer::CheatImpulseCommands(int)
354	CCSPlayer::ClientCommand(CCommand  const&)
355	CBasePlayer::StartObserverMode(int)
356	CBasePlayer::StopObserverMode(void)
357	CBasePlayer::ModeWantsSpectatorGUI(int)
358	CBasePlayer::SetObserverMode(int)
359	CBasePlayer::GetObserverMode(void)
360	CBasePlayer::SetObserverTarget(CBaseEntity *)
361	CBasePlayer::ObserverUse(bool)
362	CBasePlayer::GetObserverTarget(void)
363	CBasePlayer::FindNextObserverTarget(bool)
364	CCSPlayer::GetNextObserverSearchStartPoint(bool)
365	CBasePlayer::IsValidObserverTarget(CBaseEntity *)
366	CBasePlayer::CheckObserverSettings(void)
367	CBasePlayer::JumptoPosition(Vector  const&,QAngle  const&)
368	CBasePlayer::ForceObserverMode(int)
369	CBasePlayer::ResetObserverMode(void)
370	CBasePlayer::ValidateCurrentObserverTarget(void)
371	CCSPlayer::AttemptToExitFreezeCam(void)
372	CCSPlayer::StartReplayMode(float,float,int)
373	CCSPlayer::StopReplayMode(void)
374	CBasePlayer::GetDelayTicks(void)
375	CBasePlayer::GetReplayEntity(void)
376	CBasePlayer::CreateCorpse(void)
377	CCSPlayer::EntSelectSpawnPoint(void)
378	CBasePlayer::GetInVehicle(IServerVehicle *,int)
379	CBasePlayer::LeaveVehicle(Vector  const&,QAngle  const&)
380	CBasePlayer::OnVehicleStart(void)
381	CBasePlayer::OnVehicleEnd(Vector &)
382	CCSPlayer::BumpWeapon(CBaseCombatWeapon *)
383	CBasePlayer::SelectLastItem(void)
384	CBasePlayer::SelectItem(char  const*,int)
385	CBasePlayer::ItemPostFrame(void)
386	CCSPlayer::GiveNamedItem(char  const*,int)
387	CBasePlayer::CheckTrainUpdate(void)
388	CBasePlayer::SetPlayerUnderwater(bool)
389	CBasePlayer::CanBreatheUnderwater(void)const
390	CBasePlayer::PlayerUse(void)
391	CCSPlayer::PlayUseDenySound(void)
392	CCSPlayer::FindUseEntity(void)
393	CCSPlayer::IsUseableEntity(CBaseEntity *,unsigned int)
394	CBasePlayer::PickupObject(CBaseEntity *,bool)
395	CBasePlayer::ForceDropOfCarriedPhysObjects(CBaseEntity *)
396	CBasePlayer::GetHeldObjectMass(IPhysicsObject *)
397	CBasePlayer::UpdateGeigerCounter(void)
398	CBasePlayer::GetAutoaimVector(float)
399	CBasePlayer::GetAutoaimVector(float,float)
400	CBasePlayer::GetAutoaimVector(autoaim_params_t &)
401	CBasePlayer::ShouldAutoaim(void)
402	CBasePlayer::ForceClientDllUpdate(void)
403	CBasePlayer::ProcessUsercmds(CUserCmd *,int,int,int,bool)
404	CCSPlayer::PlayerRunCommand(CUserCmd *,IMoveHelper *)
405	CBasePlayer::ChangeTeam(int,bool,bool)
406	CBaseMultiplayerPlayer::CanHearAndReadChatFrom(CBasePlayer *)
407	CBaseMultiplayerPlayer::CanSpeak(void)
408	CCSPlayer::ModifyOrAppendPlayerCriteria(AI_CriteriaSet &)
409	CBasePlayer::CheckChatText(char *,int)
410	CCSPlayer::CreateRagdollEntity(void)
411	CBasePlayer::ShouldAnnounceAchievement(void)
412	CBasePlayer::EquipWearable(CWearableItem *)
413	CBasePlayer::RemoveWearable(CWearableItem *)
414	CBasePlayer::IsFollowingPhysics(void)
415	CCSPlayer::InitVCollision(Vector  const&,Vector  const&)
416	CBasePlayer::UpdatePhysicsShadowToCurrentPosition(void)
417	CBasePlayer::Hints(void)
418	CBasePlayer::IsReadyToPlay(void)
419	CBasePlayer::IsReadyToSpawn(void)
420	CBasePlayer::ShouldGainInstantSpawn(void)
421	CBasePlayer::ResetPerRoundStats(void)
422	CBasePlayer::ResetScores(void)
423	CBasePlayer::EquipSuit(bool)
424	CBasePlayer::RemoveSuit(void)
425	CCSPlayer::CommitSuicide(bool,bool)
426	CCSPlayer::CommitSuicide(Vector  const&,bool,bool)
427	CBasePlayer::IsBot(void)const
428	CBasePlayer::IsBotOfType(int)const
429	CBasePlayer::GetBotType(void)const
430	CBaseMultiplayerPlayer::GetExpresser(void)
431	CCSPlayer::SpawnArmorValue(void)const
432	CCSPlayer::NetworkStateChanged_m_ArmorValue(void)
433	CCSPlayer::NetworkStateChanged_m_ArmorValue(void *)
434	CBasePlayer::HasHaptics(void)
435	CBasePlayer::SetHaptics(bool)
436	CBasePlayer::PlayerSolidMask(bool)const
437	CAI_ExpresserHost<CBasePlayer>::NoteSpeaking(float,float)
438	CAI_ExpresserHost<CBasePlayer>::Speak(char  const*,char  const*,char *,unsigned int,IRecipientFilter *)
439	CAI_ExpresserHost<CBasePlayer>::PostSpeakDispatchResponse(char  const*,AI_Response *)
440	CBaseMultiplayerPlayer::SpeakIfAllowed(char  const*,char  const*,char *,unsigned int,IRecipientFilter *)
441	CBaseMultiplayerPlayer::SpeakConceptIfAllowed(int,char  const*,char *,unsigned int,IRecipientFilter *)
442	CBaseMultiplayerPlayer::CanSpeakVoiceCommand(void)
443	CBaseMultiplayerPlayer::ShouldShowVoiceSubtitleToEnemy(void)
444	CBaseMultiplayerPlayer::NoteSpokeVoiceCommand(char  const*)
445	CBaseMultiplayerPlayer::OnAchievementEarned(int)
446	CBaseMultiplayerPlayer::GetMultiplayerExpresser(void)
447	CBaseMultiplayerPlayer::CalculateTeamBalanceScore(void)
448	CBaseMultiplayerPlayer::CreateExpresser(void)
449	CCSPlayer::IsBeingGivenItem(void)const
450	CCSPlayer::CSAnim_GetActiveWeapon(void)
451	CCSPlayer::CSAnim_CanMove(void)
452	CCSPlayer::Blind(float,float,float)